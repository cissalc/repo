《1》概念理解

 id_rsa.pub是公钥
 id-rsa是私钥


加密和认证
　　首先我们需要区分加密和认证这两个基本概念。
　　加密是将数据资料加密，使得非法用户即使取得加密过的资料，也无法获取正确的资料内容，所以数据加密可以保护数据，防止监听攻击。其重点在于数据的安全性。身份认证是用来判断某个身份的真实性，确认身份后，系统才可以依不同的身份给予不同的权限。其重点在于用户的真实性。两者的侧重点是不同的。
　　公钥和私钥
　　其次我们还要了解公钥和私钥的概念和作用。
　　在现代密码体制中加密和解密是采用不同的密钥（公开密钥），也就是非对称密钥密码系统，每个通信方均需要两个密钥，即公钥和私钥，这两把密钥可以互为加解密。公钥是公开的，不需要保密，而私钥是由个人自己持有，并且必须妥善保管和注意保密。
　　公钥私钥的原则：

    一个公钥对应一个私钥。
    密钥对中，让大家都知道的是公钥，不告诉大家，只有自己知道的，是私钥。
    如果用其中一个密钥加密数据，则只有对应的那个密钥才可以解密。
    如果用其中一个密钥可以进行解密数据，则该数据必然是对应的那个密钥进行的加密。

　　非对称密钥密码的主要应用就是公钥加密和公钥认证，而公钥加密的过程和公钥认证的过程是不一样的，下面我就详细讲解一下两者的区别。
　　基于公开密钥的加密过程
　　比如有两个用户Alice和Bob，Alice想把一段明文通过双钥加密的技术发送给Bob，Bob有一对公钥和私钥，那么加密解密的过程如下：

    （1）Bob将他的公开密钥传送给Alice。
    （2）Alice用Bob的公开密钥加密她的消息，然后传送给Bob。
    （3）Bob用他的私人密钥解密Alice的消息。


基于公开密钥的认证过程
　　身份认证和加密就不同了，主要用户鉴别用户的真伪。这里我们只要能够鉴别一个用户的私钥是正确的，就可以鉴别这个用户的真伪。
　　还是Alice和Bob这两个用户，Alice想让Bob知道自己是真实的Alice，而不是假冒的，因此Alice只要使用公钥密码学对文件签名发送给Bob，Bob使用Alice的公钥对文件进行解密，如果可以解密成功，则证明Alice的私钥是正确的，因而就完成了对Alice的身份鉴别。整个身份认证的过程如下：

   （1） Alice用她的私人密钥对文件加密，从而对文件签名。
   （2）Alice将签名的文件传送给Bob。
   （3）Bob用Alice的公钥解密文件，从而验证签名。









SSH简介及公钥、私钥的基本概念

在学习git的过程中接触到了SSH的概念，
首先介绍SSH，wikipedia的介绍如下：

SSH为一项创建在应用层和传输层基础上的安全协议。最早的时候，互联网通信都是明文通信，一但被截获，内容就暴露无遗，之后在1995年，芬兰学者Tatu Ylonen设计了SSH协议，将信息加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广。当然需要指出的是，SSH只是一种协议，存在着很多实现，著名的有OpenSSH以及PuTTY。

在客户端来看，SSH提供了两种级别的安全验证：

第一种级别（基于密码的安全验证），即账号+密码，但是可能有别的服务器在冒充真正的服务器，无法避免被“中间人”攻击（man-in-the-middle）；

第二种级别（基于密钥的安全验证），这里的密钥即包括公钥、私钥。这些都属于密码学的概念，容易混淆。接下来阐述下加密、认证、公钥、私钥的概念和关系。

首先明确加密、认证两个概念：

加密是将数据资料加密，使得非法用户即使截获到加密过的资料，也无法获取正确的内容，所以数据加密可以保护数据，它的重点在于数据的安全性。身份认证是用来判断某个身份的真实性，其重点在于用户的真实性。两者的侧重点是不同的。

其次了解公钥和私钥的概念：

现代密码体制中加密盒解密采用不同的密钥（公钥和私钥），也就是非对称密钥密码系统，是从前对称加密方式的提高与增强。每个通信方均需两个密钥：公钥和私钥。公钥用来加密/验章用的，私钥用来解密/签章。

1，公钥和私钥成对出现
2，公开的密钥叫公钥，只有自己知道的叫私钥
3，用公钥加密的数据只有对应的私钥可以解密
4，用私钥加密的数据只有对应的公钥可以解密
5，如果可以用公钥解密，则必然是对应的私钥加的密
6，如果可以用私钥解密，则必然是对应的公钥加的密

接下来用电子邮件的方式说明一下原理。收发邮件需实现如下目的：

1. A发送给B的内容必须加密，在邮件的传输过程中不能被别人看到。（加密）
2. 必须保证是A发送的邮件，不是别人冒充我的。（认证）

要达到发送一个加密邮件的目标，必须发送邮件的双方都有公钥和私钥，且A必须拥有B的公钥，B也必须拥有A的公钥。

当A->B资料时，A会使用B的公钥加密，这样才能确保只有B能解密查看真实内容，即加密机制。

验证方面则是使用签/验章的机制，A传资料给B（当然不只是B，所有有A公钥的人都可以）时，会以A的私钥做签章，因为私钥只有A手里有，如此所有收到讯息的人都可以用A的公钥进行验章，便可确认讯息是由 A 发出来的了，即认证机制。


接下来把wikipedia上关于SSH第二种级别的解释补上：

第二种级别（基于密钥的安全验证），需要依靠密钥，也就是你必须为自己创建一对密钥，并有公有密钥放在需要访问的服务器上。客户端软件会向服务器发出请求，请求用你的密钥进行安全验证。服务器收到请求之后，先在你在该服务器的用户根目录下寻找你的公钥，然后将它和你发送过来的公钥进行比较。如果两个密钥一致，服务器就用公钥加密“质询”（challenge），并把它发送给客户端软件，从而避免被“中间人”攻击。

在服务器端，SSH也提供安全验证。在第一种方案中，主机将自己的公钥分发给相关的客户端，客户端在访问主机时则使用该主机的公钥加密数据，主机则使用自己的私钥来解密数据，从而保证数据的保密性。

第二种方案中，存在一个密钥认证中心（CA），所有提供服务的主机（客户端也可以）都将自己的公钥以及身份信息交给认证中心，当然该认证中心是权威机构，担保证书信息的有效性。认证中心在核实身份后，发给服务器一个数字证书，该证书是认证中心用自己的私钥对服务器的一些相关信息和公钥一起进行加密的，自此，服务端就可以使用自己的数字证书进行相关活动。服务端用客户端的公钥将内容加密后，用自身的私钥签章，连同数字证书，一同发给客户端。客户端收到服务端发来的信息时，用CA的公钥解开数字证书，就可以拿到服务端的真实公钥以及加密信息了。当然数字证书只在特定时间段内有效。





http://blog.csdn.net/hustpzb/article/details/8230454

 一 、

设置Git的user name和email：

$ git config --global user.name "xuhaiyan"

$ git config --global user.email "haiyan.xu.vip@gmail.com"


二、生成SSH密钥过程：
1.查看是否已经有了ssh密钥：cd ~/.ssh
如果没有密钥则不会有此文件夹，有则备份删除
2.生存密钥：

    $ ssh-keygen -t rsa -C “haiyan.xu.vip@gmail.com” //-C “haiyan.xu.vip@gmail.com”可以不写
    按3个回车，密码为空。


    Your identification has been saved in /home/tekkub/.ssh/id_rsa.
    Your public key has been saved in /home/tekkub/.ssh/id_rsa.pub.
    The key fingerprint is:
    ………………


最后得到了两个文件：id_rsa和id_rsa.pub


3.添加密钥到ssh：ssh-add 文件名
需要之前输入密码。
4.在github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥。

打开https://github.com/ ，登陆xuhaiyan825，然后添加ssh。


5.测试：ssh git@github.com

    The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.
    RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
    Are you sure you want to continue connecting (yes/no)? yes
    Warning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.
    ERROR: Hi tekkub! You’ve successfully authenticated, but GitHub does not provide shell access
    Connection to github.com closed.


三、 开始使用github
1.获取源码：

$ git clone git@github.com:billyanyteen/github-services.git

2.这样你的机器上就有一个repo了。
3.git于svn所不同的是git是分布式的，没有服务器概念。所有的人的机器上都有一个repo，每次提交都是给自己机器的repo
仓库初始化：

git init

生成快照并存入项目索引：

git add

文件,还有git rm,git mv等等…
项目索引提交：

git commit

4.协作编程：
将本地repo于远程的origin的repo合并，
推送本地更新到远程：

git push origin master

更新远程更新到本地：

git pull origin master

补充：
添加远端repo：

$ git remote add upstream git://github.com/pjhyett/github-services.git

重命名远端repo：

$ git://github.com/pjhyett/github-services.git为“upstream”

